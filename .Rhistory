comparableBodyFat<-scale(bodyFat)
##################################################################  Task 1  ################################################################################
library(tidyverse)
library(ggplot2) # load the library ggplot2
setwd('C:/ProgsR/ProjetR')
getwd()
bodyFat<-readxl::read_xlsx('Bodyfat.xlsx')
print(bodyFat, n=4)
#Making data comparable
comparableBodyFat<-scale(bodyFat)
heatmap(comparableBodyFat, scale = "none")
stepModel<-stepAIC(modelTraining,direction = "both") # give us what are the most relevevante and significant variables
library(MASS)
stepModel<-stepAIC(modelTraining,direction = "both") # give us what are the most relevevante and significant variables
modelTraining<-lm(formula = class ~ Density +Age + Weight+Height+Neck+Chest+Abdomen+Hip+Thigh+Knee+Ankle+Biceps+Forearm+Wrist,
data = training)
training  <- subset(bodyFat, percentageClass == TRUE)
#We just have to divide the class-variable into training-and testing in order to predict whether a participant belong to a specific class of bodyfat-percentage
percentageClass <- sample.split(bodyFat$class, SplitRatio = .85)
require(caTools)
#We just have to divide the class-variable into training-and testing in order to predict whether a participant belong to a specific class of bodyfat-percentage
percentageClass <- sample.split(bodyFat$class, SplitRatio = .85)
training  <- subset(bodyFat, percentageClass == TRUE)
dim(testing) # 38 15
testing   <- subset(bodyFat, percentageClass == FALSE)
dim(testing) # 38 15
dim(training)# 214 15
#finding SSE allows to make a better estimation of a fitted model
sse <- sum((fitted(reg) - bodyFat$class)^2)
modelTraining<-lm(formula = class ~ Density +Age + Weight+Height+Neck+Chest+Abdomen+Hip+Thigh+Knee+Ankle+Biceps+Forearm+Wrist,
data = training)
stepModel<-stepAIC(modelTraining,direction = "both") # give us what are the most relevevante and significant variables
set.seed(100)
set.seed(100)
################################################################ Training data#####################################################
#model <- lm(class ~ Density +Age + Weight+Height+Neck+Chest+Abdomen+Hip+Thigh+Knee+Ankle+Biceps+Forearm+Wrist, data = bodyFat)
set.seed(100)
################################################################ Training data#####################################################
#model <- lm(class ~ Density +Age + Weight+Height+Neck+Chest+Abdomen+Hip+Thigh+Knee+Ankle+Biceps+Forearm+Wrist, data = bodyFat)
set.seed(100)
modelTraining<-lm(formula = class ~ Density +Age + Weight+Height+Neck+Chest+Abdomen+Hip+Thigh+Knee+Ankle+Biceps+Forearm+Wrist,
data = training)
stepModel<-stepAIC(modelTraining,direction = "both") # give us what are the most relevevante and significant variables
source("C:/ProgsR/ProjetR/BodyFat.R", echo=TRUE)
modelTraining<-lm(formula = class ~ Density +Age + Weight+Height+Neck+Chest+Abdomen+Hip+Thigh+Knee+Ankle+Biceps+Forearm+Wrist,
data = training)
##################################################################  Task 1  ################################################################################
library(tidyverse)
library(ggplot2) # load the library ggplot2
#install.packages("viridis")
#install.packages("GGally")
library(GGally)
setwd('C:/ProgsR/ProjetR')
getwd()
bodyFat<-readxl::read_xlsx('Bodyfat.xlsx')
print(bodyFat, n=4)
# Now we'll be looking in next step how our data behave depending on each other. For this purpose we decide to use ggpair  coming from GGally-library
library(GGally) # involve including ggplot2-library
require(caTools)
#We just have to divide the class-variable into training-and testing in order to predict whether a participant belong to a specific class of bodyfat-percentage
percentageClass <- sample.split(bodyFat$class, SplitRatio = .85)
training  <- subset(bodyFat, percentageClass == TRUE)
testing   <- subset(bodyFat, percentageClass == FALSE)
dim(testing) # 38 15
dim(training)# 214 15
############################################################################Multiple Regression Model##############################
library(MASS)
library(car)
modelTraining<-lm(formula = class ~ Density +Age + Weight+Height+Neck+Chest+Abdomen+Hip+Thigh+Knee+Ankle+Biceps+Forearm+Wrist,
data = training)
stepModel<-stepAIC(modelTraining,direction = "both") # give us what are the most relevevante and significant variables
################################################################ Training data#####################################################
#model <- lm(class ~ Density +Age + Weight+Height+Neck+Chest+Abdomen+Hip+Thigh+Knee+Ankle+Biceps+Forearm+Wrist, data = bodyFat)
set.seed(100)
modelTraining<-lm(formula = class ~ Density +Age + Weight+Height+Neck+Chest+Abdomen+Hip+Thigh+Knee+Ankle+Biceps+Forearm+Wrist,
data = training)
stepModel<-stepAIC(modelTraining,direction = "both") # give us what are the most relevevante and significant variables
################################################################ Training data#####################################################
#model <- lm(class ~ Density +Age + Weight+Height+Neck+Chest+Abdomen+Hip+Thigh+Knee+Ankle+Biceps+Forearm+Wrist, data = bodyFat)
set.seed(1002)
modelTraining<-lm(formula = class ~ Density +Age + Weight+Height+Neck+Chest+Abdomen+Hip+Thigh+Knee+Ankle+Biceps+Forearm+Wrist,
data = training)
stepModel<-stepAIC(modelTraining,direction = "both") # give us what are the most relevevante and significant variables
modelTraining1<-lm(formula = class ~ Density +Age +Abdomen,  data = training)
stepModel<-stepAIC(modelTraining1,direction = "both") # give us what are the most relevevante and significant variables
sseStepModel <- sum((fitted(modelTraining1) - modelTraining$class)^2) # 0
sseStepModel
summary(modelTraining1)$coefficient
summary(modelTraining1)
summary(modelTraining1)$coefficient
stepModel<-stepAIC(modelTraining1,direction = "both") # give us what are the most relevevante and significant variables
modelTraining1<-lm(formula = class ~ Density +Age +Abdomen,  data = training)
modelTraining1
summary(modelTraining1)$coefficient
newModelTraining<-lm(formula = class ~ Density +Age +Abdomen,  data = training)
stepModel<-stepAIC(newModelTraining,direction = "both") # give us what are the most relevevante and significant variables
summary(stepModel)
summary(newModelTraining)$coefficient
newModelTraining<-lm(formula = class ~ Density +Age +Abdomen,  data = training)
stepModel<-stepAIC(newModelTraining,direction = "both") # give us what are the most relevevante and significant variables
newModelTraining<-lm(formula = class ~ Density +Chest +Abdomen,  data = training)
stepModel<-stepAIC(newModelTraining,direction = "both") # give us what are the most relevevante and significant variables
newModelTraining<-lm(formula = class ~ Density +Chest +Abdomen,  data = training)
stepModel<-stepAIC(newModelTraining,direction = "both") # give us what are the most relevevante and significant variables
summary(newModelTraining)$coefficient
summary(newModelTraining)
newModelTraining<-lm(formula = class ~ Density +Age +Abdomen,  data = training)
stepModel<-stepAIC(newModelTraining,direction = "both") # give us what are the most relevevante and significant variables
summary(newModelTraining)
vif(stepModel) # to look
stepModel<-stepAIC(modelTraining,direction = "both") # give us what are the most relevevante and significant variables
vif(stepModel) # to look
stepModel<-stepAIC(newModelTraining,direction = "both") # give us what are the most relevevante and significant variables
vif(stepModel) # to look
vif(stepModel) # A general guideline is that a VIF larger than 5 or 10 is large, indicating that the model has problems estimating the coefficient
summary(modelTraining)
newModelTraining<-lm(formula = class ~ Density +Age +Abdomen+Chest,  data = training)
sseStepModel <- sum((fitted(newModelTraining) - modelTraining$class)^2) # 0
sseStepModel
stepModel<-stepAIC(newModelTraining,direction = "both") # give us what are the most relevevante and significant variables
predictStepModel<-predict(stepModel, data=testing)
predictStepModel # display predicted data
testing["Predicted"]<-predictStepModel
testing
testing["Predicted"]<-predictStepModel
testing
predictStepModel<-predict(stepModel, data=testing)
predictStepModel # display predicted data
testing["Predicted"]<-predictStepModel
############################################################################Multiple Regression Model##############################
library(MASS)
library(car)
testing["Predicted"]<-predictStepModel
predictStepModel<-predict(stepModel, testing)
predictStepModel # display predicted data
summary(bodyFat)
testing["Predicted"]<-predictStepModel
testing
